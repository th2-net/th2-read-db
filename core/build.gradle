import org.jetbrains.kotlin.gradle.tasks.KotlinCompile
import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.JsonReportRenderer

plugins {
    id "org.jetbrains.kotlin.jvm"
    id "com.github.jk1.dependency-license-report" version "2.5"
    id "de.undercouch.download" version "5.5.0"
}

apply from: '../common.gradle'
apply from: '../publication.gradle'

sourceCompatibility = 11
targetCompatibility = 11

ext {
    coroutines_version = '1.7.3'
}

tasks.withType(KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "11"
        freeCompilerArgs += '-opt-in=kotlin.RequiresOptIn'
    }
}

configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

dependencies {
    implementation project(":grpc-read-db")

    api platform("com.exactpro.th2:bom:4.5.0")
    implementation "com.exactpro.th2:common:5.7.1-th2-5122-6799620908-06aeffc-SNAPSHOT"
    implementation "com.exactpro.th2:common-utils:2.2.0-dev"
    implementation "com.exactpro.th2:lw-data-provider-utils:0.0.1-TH2-5119-0f9550c-SNAPSHOT"

    implementation "org.slf4j:slf4j-api"

    implementation("org.apache.commons:commons-dbcp2:2.9.0") {
        because("connection pool")
    }
    implementation "org.apache.commons:commons-text"
    implementation("com.opencsv:opencsv:5.8") {
        because("publishes raw messages in csv format")
    }

    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"
    implementation "io.github.microutils:kotlin-logging:3.0.5"
    implementation "com.fasterxml.jackson.core:jackson-databind"

    testImplementation "org.junit.jupiter:junit-jupiter:5.10.0"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$coroutines_version"
    testImplementation "org.mockito.kotlin:mockito-kotlin:5.1.0"
    testImplementation "io.strikt:strikt-core:0.34.1"

    testImplementation platform("org.testcontainers:testcontainers-bom:1.19.0")
    testImplementation "org.testcontainers:testcontainers"
    testImplementation "org.testcontainers:mysql"

    testRuntimeOnly("com.mysql:mysql-connector-j:8.1.0") {
        because("mysql support")
    }
}

tasks.register('integrationTest', Test) {
    group = 'verification'
    useJUnitPlatform {
        includeTags('integration-test')
    }
    testLogging {
        showStandardStreams = true
    }
}

tasks.register('unitTest', Test) {
    group = 'verification'
    useJUnitPlatform {
        excludeTags('integration-test')
    }
    testLogging {
        showStandardStreams = true
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

jar {
    manifest {
        attributes(
                'Created-By': "${System.getProperty('java.version')} (${System.getProperty('java.vendor')})",
                'Specification-Title': '',
                'Specification-Vendor': 'Exactpro Systems LLC',
                'Implementation-Title': project.archivesBaseName,
                'Implementation-Vendor': 'Exactpro Systems LLC',
                'Implementation-Vendor-Id': 'com.exactpro',
                'Implementation-Version': project.version
        )
    }
}

licenseReport {
    def licenseNormalizerBundlePath = "$buildDir/license-normalizer-bundle.json"

    if (!file(licenseNormalizerBundlePath).exists()) {
        download.run {
            src 'https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/license-normalizer-bundle.json'
            dest "$buildDir/license-normalizer-bundle.json"
            overwrite false
        }
    }

    filters = [new LicenseBundleNormalizer(licenseNormalizerBundlePath, false)]
    renderers = [new JsonReportRenderer('licenses.json', false)]
    allowedLicensesFile = new URL("https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/allowed-licenses.json")
}