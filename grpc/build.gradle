plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "com.google.protobuf" version "0.9.3"
}

apply from: '../common.gradle'
apply from: '../publication.gradle'

sourceCompatibility = 11
targetCompatibility = 11

ext {
    grpcVersion         = '1.56.0'
    protobufVersion     = '3.23.2' // The protoc:3.23.3 https://github.com/protocolbuffers/protobuf/issues/13070
    serviceGeneratorVersion = '3.4.0'
    genBaseDir = file("${buildDir}/generated/source/proto") // from protobuf plugin
}

configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

dependencies {
    api "com.google.protobuf:protobuf-java-util"
    api "io.grpc:grpc-stub"
    implementation "io.grpc:grpc-protobuf"
    implementation "io.grpc:grpc-core"
    implementation "io.grpc:grpc-netty"

    implementation "javax.annotation:javax.annotation-api:1.3.2"

    implementation "com.exactpro.th2:grpc-service-generator:$serviceGeneratorVersion"
}

sourceSets {
    main {
        proto {
            srcDirs 'proto'
        }
        // the proto plugins add generated dir to source sets
        resources {
            srcDirs "$genBaseDir/main/services/java/resources"
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
        services {
            artifact = "com.exactpro.th2:grpc-service-generator:${serviceGeneratorVersion}:all@jar"
        }
    }
    generateProtoTasks {
        ofSourceSet('main').configureEach {
            plugins {
                grpc {}
                services {
                    option 'javaInterfacesPath=./java'
                    option 'javaInterfacesImplPath=./java'
                    option 'javaMetaInfPath=./java/resources'
                    option 'pythonPath=./python'
                }
            }
        }
    }
}


compileJava.dependsOn('generateProto')
processResources.dependsOn('generateProto')

java {
    withJavadocJar()
    withSourcesJar()
}