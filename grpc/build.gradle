import com.github.jk1.license.filter.LicenseBundleNormalizer
import com.github.jk1.license.render.JsonReportRenderer

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id "com.google.protobuf" version "0.9.3"
    id "com.github.jk1.dependency-license-report" version "2.5"
    id "de.undercouch.download" version "5.5.0"
}

apply from: '../common.gradle'
apply from: '../publication.gradle'

sourceCompatibility = 11
targetCompatibility = 11

ext {
    grpcVersion         = '1.56.0'
    protobufVersion     = '3.24.3' // The protoc:3.23.3 https://github.com/protocolbuffers/protobuf/issues/13070
    serviceGeneratorVersion = '3.5.1-th2-5122-6799578625-eec161e-SNAPSHOT'
    grpcCommonVersion = '4.3.0-dev'

    genBaseDir = file("${buildDir}/generated/source/proto") // from protobuf plugin
}

configurations.configureEach {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
    resolutionStrategy.cacheDynamicVersionsFor 0, 'seconds'
}

dependencies {
    api "com.google.protobuf:protobuf-java-util"
    api "io.grpc:grpc-stub"
    implementation "io.grpc:grpc-protobuf"
    implementation "io.grpc:grpc-core"
    implementation "io.grpc:grpc-netty"

    implementation "javax.annotation:javax.annotation-api:1.3.2"

    api "com.exactpro.th2:grpc-common:$grpcCommonVersion"
    api "com.exactpro.th2:grpc-service-generator:$serviceGeneratorVersion"
}

sourceSets {
    main {
        proto {
            srcDirs 'proto'
        }
        // the proto plugins add generated dir to source sets
        resources {
            srcDirs "$genBaseDir/main/services/java/resources"
        }
    }
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:$protobufVersion"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:$grpcVersion"
        }
        services {
            artifact = "com.exactpro.th2:grpc-service-generator:$serviceGeneratorVersion:all@jar"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
            services {
                option 'javaInterfacesPath=./java/src'
                option 'javaInterfacesImplPath=./java/src'
                option 'javaMetaInfPath=./java/resources'
                option 'pythonPath=./python'
            }
        }
        ofSourceSet('main')
    }
}

compileJava.dependsOn.add('generateProto')
processResources.dependsOn.add('generateProto')

java {
    withJavadocJar()
    withSourcesJar()
}

licenseReport {
    def licenseNormalizerBundlePath = "$buildDir/license-normalizer-bundle.json"

    if (!file(licenseNormalizerBundlePath).exists()) {
        download.run {
            src 'https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/license-normalizer-bundle.json'
            dest "$buildDir/license-normalizer-bundle.json"
            overwrite false
        }
    }

    filters = [new LicenseBundleNormalizer(licenseNormalizerBundlePath, false)]
    renderers = [new JsonReportRenderer('licenses.json', false)]
    allowedLicensesFile = new URL("https://raw.githubusercontent.com/th2-net/.github/main/license-compliance/gradle-license-report/allowed-licenses.json")
}