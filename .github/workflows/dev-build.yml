name: Build and publish dev build for read db project

on:
  push:
    branches-ignore:
      - master
      - version-*
    paths-ignore:
      - README.md
      - LICENSE
      - .gitignore
jobs:
  versions:
    name: Collect versions
    runs-on: ubuntu-20.04
    outputs:
      grpc-python: ${{ steps.python_grpc_ver.outputs.value }}
      app: ${{ steps.app_release_ver.outputs.value }}
      version_suffix: ${{ steps.suffix.value }}
    steps:
      - uses: actions/checkout@v3
      # Prepare custom build version
      - name: Get branch name
        id: branch
        run: echo "branch_name=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
      - name: Get SHA of the commit
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Get grpc release_version
        id: grpc_ver
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: grpc/gradle.properties
          properties: release_version
      - name: Build custom grpc package version
        id: python_grpc_ver
        run: echo value="${{ steps.grpc_ver.outputs.release_version }}.dev${{ github.run_id }}" >> $GITHUB_OUTPUT
      - name: Get app release_version
        id: app_ver
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: app/gradle.properties
          properties: release_version
      - name: Version suffix
        id: suffix
        run: echo value="${{ steps.sha.outputs.sha_short }}-SNAPSHOT" >> $GITHUB_OUTPUT
      - name: Build custom release version
        id: app_release_ver
        run: echo value="${{ steps.app_ver.outputs.release_version }}-${{ steps.branch.outputs.branch_name }}-${{ github.run_id }}-${{ steps.sha.outputs.sha_short }}" >> $GITHUB_OUTPUT
  build-and-publish-grpc-java:
    name: Build and publish Java gRPC distributions
    needs:
      - versions
    uses: th2-net/.github/.github/workflows/compaund-java-multi-project-build.yml@multi-project-workflows
    with:
      projectPath: grpc
      additionalTasks: '["clean", "build", "publish"]'
      versionSuffix: ${{ needs.versions.outputs.version_suffix }}
    secrets:
      sonatypeUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
      sonatypePassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
      sonatypeSigningKey: ${{ secrets.SONATYPE_GPG_ARMORED_KEY }}
      sonatypeSigningPassword: ${{ secrets.SONATYPE_SIGNING_PASSWORD }}
  build-and-publish-grpc-python:
    name: Build and publish Python distributions to PyPI
    needs:
      - versions
    uses: ./.github/workflows/build-and-publish-python.yml
    with:
      custom-version: ${{ needs.versions.outputs.grpc-python }}
    secrets: inherit
  build-and-publish-core-java:
    name: Build and publish Java core distributions
    needs:
      - versions
    uses: th2-net/.github/.github/workflows/compaund-java-multi-project-build.yml@multi-project-workflows
    with:
      projectPath: core
      additionalTasks: '["clean", "build", "publish"]'
      versionSuffix: ${{ needs.versions.outputs.version_suffix }}
    secrets:
      sonatypeUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
      sonatypePassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
      sonatypeSigningKey: ${{ secrets.SONATYPE_GPG_ARMORED_KEY }}
      sonatypeSigningPassword: ${{ secrets.SONATYPE_SIGNING_PASSWORD }}
  owasp-scan:
    needs:
      - build-and-publish-core-java
    uses: th2-net/.github/.github/workflows/owasp-gradle-scan.yml@main
    with:
      multiproject: true
  publish-docker:
    name: Build docker image
    runs-on: ubuntu-20.04
    needs:
      - versions
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Build with Gradle
        run: ./gradlew -p app --info --warning-mode all clean build dockerPrepare -Prelease_version=${{ needs.versions.outputs.app }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "REPOSITORY_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_OUTPUT
        id: meta
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          push: true
          context: . # project dir
          tags: ghcr.io/${{ github.repository }}:${{ needs.versions.outputs.app }}
          labels: com.exactpro.th2.${{ steps.meta.outputs.REPOSITORY_NAME }}=${{ needs.versions.outputs.app }}
  trivy-docker-scan:
    name: Scan Docker image for vulnerabilities
    needs:
      - publish-docker
      - versions
    uses: th2-net/.github/.github/workflows/trivy-scan-github.yml@main
    with:
      image-path: ghcr.io/${{ github.repository }}:${{ needs.versions.outputs.app }}
      target: 'os,library'
      sensitivity: 'CRITICAL,HIGH,MEDIUM'