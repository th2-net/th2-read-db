name: Build and publish dev build for read db project

on:
  push:
    branches-ignore:
      - master
      - version-*
    paths-ignore:
      - README.md
      - LICENSE
      - .gitignore
jobs:
  versions:
    name: Collect versions
    runs-on: ubuntu-20.04
    outputs:
      grpc-java: ${{ steps.java_grpc_ver.outputs.value }}
      grpc-python: ${{ steps.python_grpc_ver.outputs.value }}
      app: ${{ steps.app_release_ver.outputs.value }}
      root: ${{ steps.root_release.outputs.value }}
    steps:
      - uses: actions/checkout@v3
      # Prepare custom build version
      - name: Get branch name
        id: branch
        run: echo "branch_name=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT
      - name: Get SHA of the commit
        id: sha
        run: echo "sha_short=$(git rev-parse --short HEAD)" >> $GITHUB_OUTPUT
      - name: Get grpc release_version
        id: grpc_ver
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: grpc/gradle.properties
          properties: release_version
      - name: Get app release_version
        id: app_ver
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: app/gradle.properties
          properties: release_version
      - name: Get root release_version
        id: root_ver
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: gradle.properties
          properties: release_version
      - name: Build custom release version
        id: app_release_ver
        run: echo value="${{ steps.app_ver.outputs.release_version }}-${{ steps.branch.outputs.branch_name }}-${{ github.run_id }}-${{ steps.sha.outputs.sha_short }}" >> $GITHUB_OUTPUT
      - name: Build custom grpc release version for java
        id: java_grpc_ver
        run: echo value="${{ steps.grpc_ver.outputs.release_version }}-${{ steps.branch.outputs.branch_name }}-${{ steps.sha.outputs.sha_short }}-SNAPSHOT" >> $GITHUB_OUTPUT
      - name: Build custom root release version
        id: root_release
        run: echo value="${{ steps.root_ver.outputs.release_version }}-${{ steps.branch.outputs.branch_name }}-SNAPSHOT" >> $GITHUB_OUTPUT
      - name: Build custom grpc package version
        id: python_grpc_ver
        run: echo value="${{ steps.grpc_ver.outputs.release_version }}.dev${{ github.run_id }}" >> $GITHUB_OUTPUT
      - name: Show app release version
        run: echo ${{ steps.app_release_ver.outputs.value }}
      - name: Show grpc java release version
        run: echo ${{ steps.java_grpc_ver.outputs.value }}
      - name: Show grpc python release version
        run: echo ${{ steps.python_grpc_ver.outputs.value }}
  changes:
    name: Collect changed files
    runs-on: ubuntu-20.04
    outputs:
      app: ${{ steps.filter.outputs.app }}
      grpc: ${{ steps.filter.outputs.grpc }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          base: ${{ github.ref }}
          filters: |
            app:
              - 'app/**'
            grpc:
              - 'grpc/**'
  build-and-publish-java:
    name: Build and publish Java distributions
    needs:
      - changes
      - versions
    runs-on: ubuntu-20.04
    if: ${{ needs.changes.outputs.grpc == 'true' }}
    steps:
      - uses: actions/checkout@v3
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Build with Gradle
        run: ./gradlew --info --warning-mode all clean :grpc-read-db:build :grpc-read-db:publish -Prelease_version=${{ needs.versions.outputs.grpc-java }}
        env:
          ORG_GRADLE_PROJECT_sonatypeUsername: ${{ secrets.SONATYPE_NEXUS_USERNAME }}
          ORG_GRADLE_PROJECT_sonatypePassword: ${{ secrets.SONATYPE_NEXUS_PASSWORD }}
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.SONATYPE_GPG_ARMORED_KEY }}
          ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.SONATYPE_SIGNING_PASSWORD }}
  build-and-publish-python:
    name: Build and publish Python distributions to PyPI
    needs:
      - changes
      - versions
    runs-on: ubuntu-20.04
    if: ${{ needs.changes.outputs.grpc == 'true' }}
    steps:
      - uses: actions/checkout@v3
      - name: Set version for current build in package_info.json
        uses: MerthinTechnologies/edit-json-action@v1
        with:
          filename: 'grpc/package_info.json'
          key: 'package_version'
          value: ${{ needs.versions.outputs.grpc-python }}
      - name: Set up Python 3.7
        uses: actions/setup-python@v4
        with:
          python-version: 3.7
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Build with Gradle
        run: ./gradlew clean :grpc-read-db:build
      - name: Build package
        working-directory: ./grpc
        run: |
          pip install -r requirements.txt
          python setup.py generate -s
          python setup.py sdist
      - name: Publish distribution to PyPI
        uses: pypa/gh-action-pypi-publish@master
        with:
          user: __token__
          password: ${{ secrets.PYPI_PASSWORD }}
          repository_url: https://upload.pypi.org/legacy/
          packages_dir: grpc/dist/
  publish-docker:
    name: Bulid docker image
    runs-on: ubuntu-20.04
    needs:
      - build-and-publish-python
      - build-and-publish-java
      - versions
    if: |
      always() &&
      (needs.changes.outputs.app == 'true' || needs.changes.outputs.grpc == 'true')
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'
      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2
      - name: Build and publish gRPC with Gradle
        run: ./gradlew --info --warning-mode all :app:clean :app:build :app:dockerPrepare -Prelease_version=${{ needs.versions.outputs.app }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - run: echo "REPOSITORY_NAME=$(echo '${{ github.repository }}' | awk -F '/' '{print $2}')" >> $GITHUB_OUTPUT
        id: meta
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          push: true
          context: . # project dir
          tags: ghcr.io/${{ github.repository }}:${{ needs.versions.outputs.app }}
          labels: com.exactpro.th2.${{ steps.meta.outputs.REPOSITORY_NAME }}=${{ needs.versions.outputs.app }}